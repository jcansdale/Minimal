#!/bin/bash

pushd $(dirname ${BASH_SOURCE[0]}) > /dev/null

source ./admin.cfg

server_install() {
    server_uninstall

    echo "$(tput bold)Install Node.js$(tput sgr0)"
    sudo apt-get install --yes nodejs

    echo "$(tput bold)Install NGINX$(tput sgr0)"
    sudo apt-get install --yes nginx

    echo "$(tput bold)Configure NGINX reverse proxy$(tput sgr0)"
    sudo systemctl stop nginx.service
cat << EOF > "${site}.conf"
server {
    listen 80;
    listen 443 ssl;
    server_name ${domain};
    ssl_certificate /etc/letsencrypt/live/${domain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${domain}/privkey.pem;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    return 301 \$scheme://www.${domain}\$request_uri;
}
server {
    listen 80;
    listen 443 ssl;
    server_name www.${domain};
    ssl_certificate /etc/letsencrypt/live/${domain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${domain}/privkey.pem;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    location / {
        proxy_pass http://localhost:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_cache_bypass \$http_upgrade;
        proxy_ssl_session_reuse off;
    }
}
EOF
    cat "${site}.conf"
    sudo cp "${site}.conf" "/etc/nginx/sites-available/${site}.conf"
    rm "${site}.conf"
    sudo rm -f "/etc/nginx/sites-enabled/default"
    sudo ln -f -s "/etc/nginx/sites-available/${site}.conf" "/etc/nginx/sites-enabled/${site}.conf"
    sudo systemctl start nginx.service
    sudo systemctl status nginx.service --no-pager --lines=1000 --full

    echo "$(tput bold)Configure ${site}.service$(tput sgr0)"
cat > "${site}.service" << EOF
[Unit]
Description=${site}.service
[Service]
WorkingDirectory=$(pwd)
ExecStart=/usr/bin/node $(pwd)/app.js
Environment=NODE_ENV=production
Restart=always
RestartSec=10
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=${site}.service
User=$(whoami)
Group=$(whoami)
[Install]
WantedBy=multi-user.target
EOF
    cat "${site}.service"
    sudo cp "${site}.service" "/etc/systemd/system/${site}.service"
    rm "${site}.service"
    echo "$(tput bold)Enable ${site}.service$(tput sgr0)"
    sudo systemctl enable ${site}.service
}

server_uninstall() {
    server_stop

    if [ -f "/etc/systemd/system/${site}.service" ] && [ $(systemctl is-enabled ${site}.service) = "enabled" ]; then
        echo "$(tput bold)Disable ${site}.service$(tput sgr0)"
        sudo systemctl disable "${site}.service"
        sudo rm "/etc/systemd/system/${site}.service"
    fi

    if [ -f "/etc/nginx/sites-available/${site}.conf" ]; then
        echo "$(tput bold)Configure NGINX reverse proxy$(tput sgr0)"
        sudo systemctl stop nginx.service
        sudo rm "/etc/nginx/sites-enabled/${site}.conf"
        sudo rm "/etc/nginx/sites-available/${site}.conf"
        sudo ln -f -s "/etc/nginx/sites-available/default" "/etc/nginx/sites-enabled/default"
        sudo systemctl start nginx.service
        sudo systemctl status nginx.service --no-pager --lines=1000 --full
    fi
}

server_cert() {
    echo "$(tput bold)Install Let's Encrypt$(tput sgr0)"
    sudo apt-get install --yes letsencrypt # https://letsencrypt.org/getting-started

    if sudo test -f "/etc/letsencrypt/live/${domain}/fullchain.pem" && sudo test -f "/etc/letsencrypt/live/${domain}/privkey.pem"; then
        echo "$(tput bold)Re-new Let's Encrypt certificate$(tput sgr0)"
        sudo letsencrypt renew
    else
        echo "$(tput bold)Create Let's Encrypt certificate$(tput sgr0)"
        mkdir -p .well-known/acme-challenge
        sudo letsencrypt certonly --webroot -w $(pwd) -d ${domain} -d www.${domain} --agree-tos --email ${mail}
        rm -R .well-known
        rm letsencrypt.log
    fi

    echo "$(tput bold)Reload NGINX$(tput sgr0)"
    sudo systemctl reload nginx.service
    sudo systemctl status nginx.service --no-pager --lines=1000 --full
}

server_start() {
    echo "$(tput bold)Start ${site}.service$(tput sgr0)"
    sudo systemctl start ${site}.service
    sleep 1
    sudo systemctl status ${site}.service  --no-pager --lines=1000 --full
}

server_stop() {
    if [ $(systemctl is-active "${site}.service") = "active" ]; then
        echo "$(tput bold)Stop ${site}.service$(tput sgr0)"
        sudo systemctl stop "${site}.service"
        sudo systemctl status ${site}.service  --no-pager --lines=1000 --full
    fi
}

server_status() {
    sudo systemctl status ${site}.service --no-pager --lines=1000 --full
}

server_pull() {
    echo "$(tput bold)git fetch -p$(tput sgr0)"
    git fetch -p
    branch=origin/$(git rev-parse --abbrev-ref HEAD)
    echo "$(tput bold)git reset --hard ${branch}$(tput sgr0)"
    git reset --hard ${branch}
}

server_update() {
    server_stop
    server_pull
    server_start
}

client_start() {
    sleep 0.5 && git web--browse http://localhost:8080 & node app.js
}

client_status() {
    echo "$(tput bold)ssh ${user}@${server} status$(tput sgr0)"
    ssh -i ~/.ssh/${user}_id_rsa ${user}@${server} -tq -o "BatchMode yes" "/var/www/${site}/admin status"
}

client_update() {
    client_push
    echo "$(tput bold)ssh ${user}@${server} update$(tput sgr0)"
    ssh -i ~/.ssh/${user}_id_rsa ${user}@${server} -tq -o "BatchMode yes" "/var/www/${site}/admin update" # | sed 's/^/    /'
}

client_push() {
    message=$@
    echo "$(tput bold)git add -v *$(tput sgr0)"
    git add -v *
    if [ -z "${message}" ]; then # if no description is provided amend last commit and push --force
        message=$(git log --format=%B -n 1)
        echo "$(tput bold)git commit --amend -m '${message}'$(tput sgr0)"
        git commit --amend -m "${message}"
        echo "$(tput bold)git push --force$(tput sgr0)"
        git push --force
    else # if description is provided create new commit and push
        echo "$(tput bold)git commit -m '${message}'$(tput sgr0)"
        git commit -m "${message}"
        echo "$(tput bold)git push$(tput sgr0)"
        git push
    fi
}

client_console() {
    ssh -i ~/.ssh/${user}_id_rsa ${user}@${server} -t "cd /var/www/${site} && exec bash -l"
}

description() {
    echo;
    echo "  This script automates common tasks to update or run this website."
    echo "  It can be configured via $(tput smul)admin.cfg$(tput sgr0) and provides two sets of commmands," 
    echo "  one for local development and another for running the website"
    echo "  on an actual Linux server. Your computer is considered a server if the"
    echo "  repository is located or cloned under /var/www/${site}."
    echo
}

server() {
    command="$1"
    shift
    case "${command}" in
        "install") server_install;;
        "uninstall") server_uninstall;;
        "cert") server_cert;;
        "pull") server_pull;;
        "start") server_start;;
        "stop") server_stop;;
        "update") server_update;;
        "status") server_status;;
        *)
        description;
        echo "Usage: $(tput bold)$(basename "$0")$(tput sgr0) <server-command>"
        echo
        echo "    $(tput bold)install$(tput sgr0)    Install NGINX and $(tput bold)${site}.service$(tput sgr0)"
        echo "    $(tput bold)start$(tput sgr0)      Start service"
        echo "    $(tput bold)status$(tput sgr0)     Print current service status"
        echo "    $(tput bold)update$(tput sgr0)     Run stop, pull, start and status"
        echo "    $(tput bold)cert$(tput sgr0)       Create or renew SSL certificate"
        echo "    $(tput bold)pull$(tput sgr0)       Fetch Git repo and reset master branch"
        echo "    $(tput bold)stop$(tput sgr0)       Stop service"
        echo "    $(tput bold)uninstall$(tput sgr0)  Stop and uninstall service"
        echo;
    esac
}

client() {
    command="$1"
    shift
    case "${command}" in
        "start") client_start;;
        "push") client_push $@;;
        "update") client_update $@;;
        "status") client_status;;
        "console") client_console;;
        *)
            description;
            echo "Usage: $(tput bold)$(basename "$0")$(tput sgr0) <client-command>"
            echo
            echo "  $(tput bold)start$(tput sgr0)      Start $(tput smul)node app.js$(tput rmul) locally and open web browser"
            echo "  $(tput bold)push$(tput sgr0)       Amend last commit or add new commitm, then push changes"
            echo "  $(tput bold)update$(tput sgr0)     Run push command and update server"
            echo "  $(tput bold)status$(tput sgr0)     Show server log"
            echo "  $(tput bold)console$(tput sgr0)    Connect via SSH to server"
            echo;
        ;;
    esac
}

if [ -d "/var/www/${site}" ]; then 
    server $@
else
    client $@
fi

popd > /dev/null
